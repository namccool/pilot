{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "devices",
    "types": [
      "Array"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "description": "",
    "name": "measurement",
    "types": [
      "Number"
    ],
    "type": "param"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "types": [
      "Function"
    ],
    "type": "type"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Array",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Number",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Function",
  "tags": {
    "visibility": "private",
    "type": "api"
  },
  "body": "",
  "summary": "Generate `devices` with the given `size`.\n",
  "code": "--calculate(devices, size)\n  for name, i in devices\n    low = (i*size)px\n    high = (((i+1)*size) - 1)px\n    media-queries--sizes[name] = (low high)",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-above('tablet')\n      .above-keyword\n        color green\n\n    +screen-size-above(500px)\n      .above-size\n        color green\n",
  "summary": "Generate a query for screens above a given `size`.",
  "code": "screen-size-above(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size\n  condition = 'screen and (min-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n    +screen-size-below('large-desktop')\n      .below-keyword\n        color green\n\n    +screen-size-below(1000px)\n      .below-size\n        color green\n",
  "summary": "Generate a query for screens below a given `size`.",
  "code": "screen-size-below(size)\n  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size\n  condition = 'screen and (max-width: %s)' % sz\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size-between(500, 1000px)\n      .between-size-size\n        color green\n\n    +screen-size-between('tablet', 'laptop')\n      .between-keyword-keyword\n        color green\n\n    +screen-size-between('tablet', 1500px)\n      .between-keyword-size\n        color green\n\n    +screen-size-between(500px, 'laptop')\n      .between-size-keyword\n        color green\n",
  "summary": "Generate a query for screens between `low` and `high`.",
  "code": "screen-size-between(low, high)\n  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low\n  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "size",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-size('palm')\n      .palm\n        color green\n\n    +screen-size('tablet')\n      .tablet\n        color green\n\n    +screen-size('laptop')\n      .laptop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('desktop')\n      .desktop\n        color green\n\n    +screen-size('large-desktop')\n      .large-desktop\n        color green\n",
  "summary": "Generate a query for screens that match a given `size`.",
  "code": "screen-size(size)\n  lowsz = media-queries--sizes[size][0]\n  highsz = media-queries--sizes[size][1]\n  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "size"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "name": "orientation",
    "types": [
      "Unit"
    ],
    "type": "param"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Unit",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Examples:\n\n    +screen-orientation('portrait')\n      .orientationPortrait\n        color green\n\n    +screen-orientation('landscape')\n      .orientationLandscape\n        color green\n",
  "summary": "Generate a query for screens that match a given `orientation`.",
  "code": "screen-orientation(orientation)\n  condition = 'screen and (orientation: %s)' % unquote(orientation)\n  @media condition\n    {block}",
  "receiver": null,
  "type": "exposed function",
  "name": "orientation"
}
{
  "types": "Block",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "description": "",
    "types": [
      "Block"
    ],
    "type": "return"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "--media-queries--calculate",
    "local": "--media-queries--calculate",
    "type": "see"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "types": [
      "Mixin"
    ],
    "type": "type"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Block",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
{
  "types": "Mixin",
  "tags": {
    "visibility": "public",
    "type": "api"
  },
  "body": "## Example:\n\n     +screen-high-DPI()\n       .high-DPI\n         color green\n",
  "summary": "Generate a query for high DPI screens",
  "code": "screen-high-DPI()\n  conditions = ()\n  all-conditions = ''\n  for prefix in '-webkit-min-' 'min--moz-' 'min-'\n    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix\n    push(conditions, condition)\n  all-conditions = join(', ', conditions)\n  @media all-conditions\n    {block}",
  "receiver": null,
  "type": null,
  "name": null
}
